#!/bin/bash
VIRTUALENVDIR="venv"

# Create a virtual environment for python in the folder venv/ in the given
# directory. If no directory is given the current directory is assumed.
venv_create() {
	if [[ $# -eq 0 ]]; then
		name=$(basename `pwd`)
	else
		name=$(basename "$1")
		mkdir -p "$1"
		cd "$1"
	fi

	# Save project root for usage with node_modules patched
	project_root="$(pwd)"

	if [ -d "$VIRTUALENVDIR" ]; then
		echo "Virtual environment possibly already exists" 1>&2
		return 1
	fi

	# Find installed python versions
	options=()
	for python in $(compgen -c|grep '^python.\..$'|sort); do
		options+=("$(basename "$python")")
		options+=("$($python --version 2>&1)")

		# Mark the default version as on
		if [ "$(/usr/bin/env python -V 2>&1)" == "${options[${#options[@]} - 1]}" ]; then
			options+=("on")
		else
			options+=("off")
		fi
	done

	# Find installed PyPy versions
	if hash pypy 2>/dev/null; then
		options+=("pypy")
		options+=("$(pypy --version 2>&1|head -n 1|cut -f "1,2" -d' ')")
		options+=("off")
	fi

	if hash pypy3 2>/dev/null; then
		options+=("pypy3")
		options+=("$(pypy3 --version 2>&1|head -n 1|cut -f "1,2" -d' ')")
		options+=("off")
	fi

	# Make user select among versions
	python_versions=($(dialog \
		--separate-output \
		--checklist "Select Python versions:" 22 76 16 \
		"${options[@]}" \
		2>&1 >/dev/tty))

	# Clear output
	clear

	if [ ${#python_versions[@]} -eq "0" ]; then
		echo "No Python versions selected" 1>&2
		return 2
	fi

	if [ ${#python_versions[@]} -eq "1" ]; then
		# We only have one python version
		# Create virtualenv and activate it
		virtualenv --python="$python_versions" --prompt="($name)" "$VIRTUALENVDIR"
		venv_node_patch "$VIRTUALENVDIR/bin/activate" "$project_root"
	else
		# Create directory to store multiple versions in
		mkdir "$VIRTUALENVDIR"

		for python_version in "${python_versions[@]}"; do
			virtualenv \
				--python="$python_version" \
				--prompt="($name:${python_version:6})" \
				"$VIRTUALENVDIR/$python_version"
			venv_node_patch \
				"$VIRTUALENVDIR/$python_version/bin/activate" \
				"$project_root"
		done
	fi

	# Activate virtualenv and update pip
	venv_activate
	pip install --upgrade pip setuptools
}

venv_node_patch() {
	echo "$1"
	echo "$2"
	if [ ! -f "$1" ]; then
		echo "Activation file not found" 1>&2
		return 1
	fi

	if [ "$(grep 'source bin/activate' "$1")" == "" ]; then
		echo "Given file is not a valid virtualenv activation file" 1>&2
		return 2
	fi

	if [ "$(grep 'node_modules' "$1")" != "" ]; then
		echo "Activation file is already patched" 1>&2
		return 3
	fi

	echo 'PATH="'"$2"'/node_modules/.bin:$PATH"' >> "$1"
	return 0
}

venv_activate() {
	# Save current working directory to restore it later
	current_dir="$(pwd)"

	# Traverse upwards until a virtualenv directory is found
	while true; do
		if [ -d "$VIRTUALENVDIR" ]; then
			break
		elif [ $(pwd) == "/" ]; then
			echo "No virtual environment found" 1>&2
			cd "$current_dir"
			return 1
		fi
		cd ..
	done

	# Check if it is a normal or multi-version virtualenv
	if [ -f "$VIRTUALENVDIR/bin/activate" ]; then
		source "$VIRTUALENVDIR/bin/activate"
	else
		cd "$VIRTUALENVDIR"

		# Find available versions and their name
		options=()
		for venv in $(ls -1); do
			options+=("$venv")
			options+=("$($venv/bin/python --version  2>&1)")
		done
		# Create menu
		selected_venv=$(dialog \
			--menu "Select virtual environment:" 22 76 16 \
			"${options[@]}" \
			2>&1 >/dev/tty)

		# Clear menu from screen
		clear

		source "$selected_venv/bin/activate"
	fi

	# Restore present working directory
	cd "$current_dir"

	return 0
}

# Add shorthands for working with virtualenvs
alias venv="venv_create"
alias v="venv_activate"
alias d="deactivate"
